using '../fd-endpoints.main.bicep'



param rgName = ''
param profileName = ''
param endpoints = [
  {
    name: 'name'
    enabledState: 'Enabled'
    autoGeneratedDomainNameLabelScope: 'TenantReuse'
  }
]
param originGroups = [
  {
    name: 'name'
    loadBalancingSettings: {
      sampleSize: 5
      successfulSamplesRequired: 3
      additionalLatencyInMilliseconds: 240
    }
    healthProbeSettings: {
      probePath: '/'
      probeRequestType: 'HEAD'
      probeProtocol: 'Http'
      probeIntervalInSeconds: '240'
    }
    sessionAffinityState: 'Enabled'
  }
]
param origins = [
  {
    enabledState: 'Enabled'
    originGroupName: 'name'
    originName: 'name'
    hostName: '<web-app>.azurewebsites.net'
    httpPort: '80'
    httpsPort: '443'
    originHostHeader: '<web-app>.azurewebsites.net'
    enforceCertificateNameCheck: true
    priority: '1'
    weight: '1000'
    sharedPrivateLinkResource: {
      privateLink: {
        id: '<resource id for the web app>'
      }
      groupId: 'sites'
      privateLinkLocation: 'australiaeast'
      requestMessage: 'azure-fd-privatelink'
    }
  }
]
param secrets = []
param customDomains = [
  {
    customDomainName: 'name'
    hostName: 'name.domain.com'
    tlsSettings: {
      certificateType: 'ManagedCertificate'
      minimumTlsVersion: 'TLS12'
      secretName: ''
    }
    dnsZoneId: null
  }
]
param routes = [
  {
    routeName: 'name'
    endpointName: 'name'
    originGroupName: 'name'
    supportedProtocols: [
      'Http'
      'Https'
    ]
    patternsToMatch: [ '/*' ]
    forwardingProtocol: 'HttpsOnly'
    customDomains: [
      {
        name: 'name'
      }
    ]
    ruleSets: []
    linkToDefaultDomain: 'Enabled'
    httpsRedirect: 'Enabled'
  }
]
param ruleSets = []
